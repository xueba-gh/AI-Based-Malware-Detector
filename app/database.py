from sqlalchemy import create_engine, Column, Integer, Float, Boolean, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from datetime import datetime

Base = declarative_base()
engine = create_engine('sqlite:///malware_analyzer.db', echo=True)
Session = sessionmaker(bind=engine)

class Prediction(Base):
    __tablename__ = 'predictions'

    id = Column(Integer, primary_key=True)
    prediction = Column(Boolean)
    confidence = Column(Float)
    timestamp = Column(DateTime, default=datetime.utcnow)

class UserVisit(Base):
    __tablename__ = 'user_visits'

    id = Column(Integer, primary_key=True)
    timestamp = Column(DateTime, default=datetime.utcnow)

def init_db():
    Base.metadata.create_all(engine)

def add_prediction(prediction, confidence):
    session = Session()
    new_prediction = Prediction(prediction=prediction, confidence=confidence)
    session.add(new_prediction)
    session.commit()
    session.close()

def get_prediction_stats():
    session = Session()
    total = session.query(Prediction).count()
    malicious = session.query(Prediction).filter(Prediction.prediction == True).count()
    benign = total - malicious
    session.close()
    return {'total': total, 'malicious': malicious, 'benign': benign}

def add_user_visit():
    session = Session()
    new_visit = UserVisit()
    session.add(new_visit)
    session.commit()
    session.close()

def get_user_stats():
    session = Session()
    total_visits = session.query(UserVisit).count()
    unique_users = session.query(UserVisit.id.distinct()).count()  # This is a simplification
    session.close()
    return {'total_visits': total_visits, 'unique_users': unique_users}